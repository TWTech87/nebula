name: Build, Test, and Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: nebula

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build src -f src/nebula/Dockerfile -t berylliumsec/nebula:latest

    # Only push the Docker image on a push to main, not on PRs
    - name: Push Docker image
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      run: |
        docker push berylliumsec/nebula:latest

    # Only publish to PyPI on a push to main, not on PRs
    - name: Publish to PyPI
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ env.PYPI_API_TOKEN }}

    - name: Install GitHub CLI
      run: |
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
        sudo apt-add-repository https://cli.github.com/packages
        sudo apt update
        sudo apt install gh

    # Create a GitHub release
    - name: Create GitHub Release
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.new_version }}
        release_name: Release ${{ steps.bump_version.outputs.new_version }}
        draft: false
        prerelease: false

    # After the release, we upload assets
    - name: Upload Release Assets
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
      run: |
        for asset in dist/*; do
          gh release upload ${{ steps.create_release.outputs.tag_name }} $asset
        done
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}